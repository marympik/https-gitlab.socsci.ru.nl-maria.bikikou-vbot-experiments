num_trials = size(TimeStamp, 1);
correctionX = NaN(1, num_trials);  % Store signed correction in the x-direction
jumpDistances = NaN(1, num_trials);
isFastTrial = false(1, num_trials);  % Boolean array to indicate if a trial is fast

for trial = 1:num_trials
    % Extract timestamps for the trial
    timeStamps = TimeStamp(trial, :);
    
    % Extract X and Y positions of the robot during the trial
    x = squeeze(RobotPosition(trial, 1, 1:Samples(trial)));
    y = squeeze(RobotPosition(trial, 2, 1:Samples(trial)));
    
    % Extract target position from TrialData
    target_pos = WL.TrialData.TargetPosition(trial, 1:2);  % Extracting the (x, y) target position
    
    % Calculate correction relative to the target (in x-direction only)
    finalHandPos = [x(end), y(end)];  % Final hand position
    correctionX(trial) = finalHandPos(1) - target_pos(1);  % Signed correction along the x-axis
    
    % Extract jump distance for the trial
    jumpDistances(trial) = (trial);
    
    % Determine if the trial is a fast trial
    isFastTrial(trial) = strcmp(wl.TrialData.SpeedCue(trial), 'fast');  % Assuming 'SpeedCue' field specifies 'fast' or 'slow'
end

% Display correction and jump distance for each trial
for trial = 1:num_trials
    disp(['Trial ', num2str(trial), ': Jump Distance = ', num2str(jumpDistances(trial)), ' cm, Correction X = ', num2str(correctionX(trial)), ' cm']);
end

% Separate fast and slow trials
fastJumpDistances = jumpDistances(isFastTrial);
fastCorrectionX = correctionX(isFastTrial);
slowJumpDistances = jumpDistances(~isFastTrial);
slowCorrectionX = correctionX(~isFastTrial);

% Plot correction versus jump distance for all trials with fast and slow indicated by color
figure;
scatter(fastJumpDistances, fastCorrectionX, 50, 'r', 'filled');  % Fast trials in red
hold on;
scatter(slowJumpDistances, slowCorrectionX, 50, 'b', 'filled');  % Slow trials in blue
xlabel('Jump Distance (cm)');
ylabel('Correction (cm)');
title(' Correction vs. Jump Distance (Fast vs. Slow Trials)');
legend('Fast Trials', 'Slow Trials');
grid on;

% Perform linear regression for fast and slow trials
fastCoeffs = polyfit(fastJumpDistances, fastCorrectionX, 1);
slowCoeffs = polyfit(slowJumpDistances, slowCorrectionX, 1);

% Generate x values for plotting the regression lines
xFit = linspace(min(jumpDistances), max(jumpDistances), 100);

% Plot regression lines
plot(xFit, polyval(fastCoeffs, xFit), 'r--', 'LineWidth', 1.5);  % Linear fit for fast trials
plot(xFit, polyval(slowCoeffs, xFit), 'b--', 'LineWidth', 1.5);  % Linear fit for slow trials

hold off;
