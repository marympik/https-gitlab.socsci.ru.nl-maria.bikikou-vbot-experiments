% Load the data
wl = load('data\pilot02.mat');

% plot_single_trial_trajectory(wl, 1);  % Change 99 to any valid trial number
% 
% % Function to plot a single trial's trajectory
% function plot_single_trial_trajectory(wl, trial_number)
%     % Check if trial_number is valid
%     if trial_number < 1 || trial_number > size(wl.RobotPosition, 1)
%         error('Invalid trial number');
%     end
% 
%     x = squeeze(wl.RobotPosition(trial_number, 1, 1:wl.Samples(trial_number)));
%     y = squeeze(wl.RobotPosition(trial_number, 2, 1:wl.Samples(trial_number)));
% 
%     plot(x(1), y(1), 'ro', 'MarkerSize', 10, 'LineWidth', 2, 'DisplayName', 'Start Position (-7 cm)');
% 
%     % Highlight the target position (Y = 17 cm)
%     plot(x(end), 17, 'gx', 'MarkerSize', 10, 'LineWidth', 2, 'DisplayName', 'Target Position (17 cm)');
% 
%     % Plot trajectory
%     figure;
%     plot(squeeze(x), squeeze(y), 'LineWidth', 2);
%     xlim(sort(wl.WL.cfg.graphics_config.Xmin_Xmax));
%     ylim(sort(wl.WL.cfg.graphics_config.Ymin_Ymax)); 
% 
% 
% % Add axis labels with units
% xlabel('X Position (cm)');
% ylabel('Y Position (cm)');
% 
% % Add legend
% legend();
% 
%     title(['Trajectory for Trial ' num2str(trial_number)]);
%     grid on;
%     shg;
% end

% 
% plot_velocity_over_time(wl, 24);
% 
% function plot_velocity_over_time(wl, trial_number)
% 
%     % Get the X and Y positions for the trial
%     x = wl.RobotPosition(trial_number, 1, 1:wl.Samples(trial_number));
%     y = wl.RobotPosition(trial_number, 2, 1:wl.Samples(trial_number));
% 
%     % Calculate differences in position between samples
%     dx = diff(squeeze(x));  % Difference in X positions
%     dy = diff(squeeze(y));  % Difference in Y positions
% 
%     dt = diff(nonzeros(wl.TimeStamp(trial_number,:)));
% 
%     % Calculate velocity magnitude
%     velocity = sqrt((dx./dt).^2 + (dy./dt).^2);  % Calculate velocity 
% 
%     % Get the movement duration for this trial
%     movement_duration = wl.WL.TrialData.MovementDurationTime(trial_number);  % Movement duration in seconds
% 
%     time = nonzeros(wl.TimeStamp(trial_number,:));
% 
%     time= time(2:end); %calculate velocity from the 2nd point 
%     % % Number of samples for this trial
%     % num_samples = length(velocity);  % One less than the number of positions due to diff
%     % 
%     % % Calculate time per sample
%     % time_per_sample = movement_duration / num_samples;
%     % 
%     % % Create a time vector for plotting
%     % time = (1:num_samples) * time_per_sample;
% 
%     % Plot velocity over time
%     figure;
%     plot(time, velocity, 'r.');
%     xlabel('Time (seconds)');
%     ylabel('Velocity (m/s)');
%     title(['Velocity over time for Trial ', num2str(trial_number)]);
%     grid on;
% 
% end
% 
% 

% Call the function to plot a single trajectory
% plot_correction_magnitude(wl, 105);

% function plot_correction_magnitude(wl, trial_number)
%     % Initialize the ideal trajectory (from start to target)
%     start_pos = wl.RobotPosition(trial_number, 1:2, 1);  % Starting position (x, y)
%     target_pos = wl.WL.TrialData.TargetPosition(trial_number, 1:2);  % Target position (x, y)
% 
%     % Compute the direction of the ideal path (straight line from start to target)
%     ideal_vector = target_pos - start_pos;
% 
%     % Normalize the ideal vector to get the unit vector
%     ideal_unit_vector = ideal_vector / norm(ideal_vector);
% 
%     % Initialize correction magnitude (if needed)
%     correctionMagnitude = 0;
% 
%     % Store lateral deviations (for plotting)
%     lateral_deviation = [];
% 
%     % Loop through all the samples (time points) of the trial
%     for i = 1:wl.Samples(trial_number)
%         % Current position of the robot/cursor
%         current_pos = wl.RobotPosition(trial_number, 1:2, i);
% 
%         % Vector from start to the current position
%         current_vector = current_pos - start_pos;
% 
%         % Project current vector onto the ideal unit vector
%         projection_length = dot(current_vector, ideal_unit_vector);
%         projection_point = start_pos + projection_length * ideal_unit_vector;
% 
%         % Calculate lateral deviation (distance from current position to the ideal line)
%         deviation = norm(current_pos - projection_point);
% 
%         % Add the deviation to the total correction magnitude
%         correctionMagnitude = correctionMagnitude + deviation;
% 
%         % Store the deviation for plotting
%         lateral_deviation(end+1) = deviation;
%     end
% 
%     % Plot the lateral deviation over time
%     figure;
%     plot(lateral_deviation, 'LineWidth', 2);
%     xlabel('Time (samples)');
%     ylabel('Lateral Deviation (correction magnitude)');
%     title(['Correction Magnitude for Trial ', num2str(trial_number)]);
%     grid on;
% end

% analyze_corrections_by_jump_size(wl);
% 
% function analyze_corrections_by_jump_size(wl)
%     jump_sizes = unique(wl.WL.TrialData.JumpDistance);  % Get unique jump sizes
%     correction_magnitudes = wl.WL.TrialData.CorrectionMagnitude;  % Get correction magnitudes
% 
%     mean_corrections = zeros(size(jump_sizes));
%     std_corrections = zeros(size(jump_sizes));
% 
%     % Calculate mean and standard deviation for each jump size
%     for i = 1:length(jump_sizes)
%         trials_for_jump = correction_magnitudes(wl.WL.TrialData.JumpDistance == jump_sizes(i));
%         mean_corrections(i) = mean(trials_for_jump);
%         std_corrections(i) = std(trials_for_jump);  % Optional: To show variability
%     end
% 
%     % Plot mean correction magnitudes per jump size
%     figure;
%     errorbar(jump_sizes, mean_corrections, std_corrections, 'o-', 'LineWidth', 2);
%     xlabel('Jump Size');
%     ylabel('Mean Correction Magnitude');
%     title('Correction Magnitude vs Jump Size');
%     grid on;
% end

% % Select a trial number (e.g., trial 1)
% trial_number = 1;2;3;5;
% 
% % Extract the X and Y positions for the selected trial
% x = squeeze(wl.RobotPosition(trial_number, 1, 1:wl.Samples(trial_number)));
% y = squeeze(wl.RobotPosition(trial_number, 2, 1:wl.Samples(trial_number)));
% 
% % Display the X and Y positions
% disp('X Position:');
% disp(x);
% 
% disp('Y Position:');
% disp(y);
% 
% % Plot the trajectory for the selected trial
% figure;
% plot(x, y);
% xlabel('X Position');
% ylabel('Y Position');
% title(['Trajectory for Trial ', num2str(trial_number)]);
% grid on;

% Example plotting code with start, target positions, and units
% figure;
% hold on;



% plot_single_trial_trajectory_colored(wl,85);  % Change 2 to any valid trial number
% 
% % Function to plot a single trial's trajectory with color coding based on the previous trial's jump size
% function plot_single_trial_trajectory_colored(wl, trial_number)
%     % Check if trial_number is valid
%     if trial_number < 2 || trial_number > size(wl.RobotPosition, 1)
%         error('Invalid trial number. Cannot check the previous trial for trial 1.');
%     end
% 
%     % Extract position data for the selected trial
%     x = squeeze(wl.RobotPosition(trial_number, 1, 1:wl.Samples(trial_number)));
%     y = squeeze(wl.RobotPosition(trial_number, 2, 1:wl.Samples(trial_number)));
% 
%     % Get the jump size of the previous trial
%     prev_jump_size = wl.WL.TrialData.JumpDistance(trial_number - 1);  % Assuming jump sizes are stored in 'jump_size'
% 
%     % Determine color based on the jump size of the previous trial
%     if prev_jump_size > 0
%         trajectory_color = 'r';  % Red for positive jumps
%     elseif prev_jump_size < 0
%         trajectory_color = 'b';  % Blue for negative jumps
%     else
%         trajectory_color = 'k';  % Black for zero jump size (if it exists)
%     end
% 
%     % Plot trajectory
%     figure;
%     plot(x, y, trajectory_color, 'LineWidth', 2);  % Plot trajectory with color based on previous jump
% 
%     hold on;
% 
%     % Highlight the start position (-5 in Y axis)
%     plot(x(1), y(1), 'ro', 'MarkerSize', 10, 'LineWidth', 2, 'DisplayName', 'Start Position (- 7 cm)');
% 
%     % Highlight the target position (Y = 20 cm)
%     plot(x(end), 20, 'gx', 'MarkerSize', 10, 'LineWidth', 2, 'DisplayName', 'Target Position (20 cm)');
% 
%     % % Set axis limits (assuming Xmin_Xmax and Ymin_Ymax in wl.WL.cfg)
%     % plot(squeeze(x), squeeze(y), 'LineWidth', 2);
%     % xlim(sort(wl.WL.cfg.graphics_config.Xmin_Xmax));
%     % ylim(sort(wl.WL.cfg.graphics_config.Ymin_Ymax));
% 
%     % Add axis labels with units
%     xlabel('X Position (cm)');
%     ylabel('Y Position (cm)');
% 
%     % Add legend
%     legend();
% 
%     % Add title
%     title(['Trajectory for Trial ' num2str(trial_number) ' (Prev Jump: ' num2str(prev_jump_size) ' cm)']);
% 
%     % Display grid
%     grid on;
%     hold off;
% end

plot_vbot_velocity

function plot_vbot_velocity(wl,3)
    % Check if trial_number is valid
    if trial_number < 1 || trial_number > size(wl.RobotVelocity, 1)
        error('Invalid trial number');
    end

    % Extract the vBot's velocity for the selected trial
    vBot_velocity = squeeze(wl.RobotVelocity(trial_number, 1:wl.Samples(trial_number)));  % Velocity in cm/s

    % Plot the vBot's velocity
    figure;
    plot(1:length(vBot_velocity), vBot_velocity, 'r--', 'LineWidth', 2, 'DisplayName', 'vBot Velocity');

    % Add labels and legend
    xlabel('Sample Number');
    ylabel('Velocity (cm/s)');
    legend();
    title(['vBot Velocity for Trial ' num2str(trial_number)]);
    grid on;
end
